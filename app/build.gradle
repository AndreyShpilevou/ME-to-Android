plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

def midletArchivesBaseName

android {
    compileSdk COMPILE_SDK
    ndkVersion NDK_VERSION
    namespace 'ru.playsoftware.j2meloader'

    defaultConfig {
        applicationId "ru.playsoftware.j2meloader"
        minSdk MIN_SDK
        targetSdk TARGET_SDK
        versionCode 1
        versionName "${getDate()}-${versionCode}"
        ndk {
            abiFilters 'x86', 'armeabi-v7a'
        }
        resValue 'string', 'app_name', rootProject.name
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
        }
        debug {
            applicationIdSuffix '.debug'
            jniDebuggable true
            multiDexEnabled true
            multiDexKeepProguard file('multidex-config.pro')
        }
    }

    lint {
        disable 'MissingTranslation'
    }

    flavorDimensions 'default'
    productFlavors {
        play {
            buildConfigField "boolean", "DONATIONS_GOOGLE", "true"
            buildConfigField 'boolean', 'FULL_EMULATOR', 'true'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix "-play"
            ndk {
                abiFilters 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            }
        }
        open {
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"
            buildConfigField 'boolean', 'FULL_EMULATOR', 'true'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix "-open"
        }
        fdroid {
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"
            buildConfigField 'boolean', 'FULL_EMULATOR', 'true'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        dev {
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"
            buildConfigField 'boolean', 'FULL_EMULATOR', 'true'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        // variant dimension for create android port from J2ME app source
        midlet {
            buildConfigField "boolean", "DONATIONS_GOOGLE", "false"
            buildConfigField 'boolean', 'FULL_EMULATOR', 'false'
            // configure midlet's port project params here, as default it read from app manifest,
            // placed to 'app/src/midlet/resources/MIDLET-META-INF/MANIFEST.MF'
            def props = getMidletManifestProperties()
            def midletName = props.getValue('MIDlet-Name').trim()
            def apkName = midletName.replaceAll('[/\\\\:*?\"<>|]', '').replace(' ', '_')
            applicationId "com.example.androidlet.${apkName.toLowerCase()}"
            versionName = props.getValue('MIDlet-Version')
            resValue 'string', 'app_name', midletName
            midletArchivesBaseName = apkName
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-midlet.pro'
        }
    }

    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = false
        }
        abi {
            enableSplit = true
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/cpp/Android.mk'
        }
    }

    applicationVariants.all {
        if (buildType.name == 'debug' && flavorName != 'midlet') {
            resValue 'string', 'app_name', 'JL-Debug'
        }
        def baseName = flavorName == 'midlet' ? "${midletArchivesBaseName}-" : "${rootProject.name}-"
        outputs.all {
            outputFileName = "${baseName}${versionName}-${dirName}-${buildType.name}.apk"
                    .replaceAll('--+', '-').replaceAll(' +', '_')
        }
    }
}

def getMidletManifestProperties() {
    def file = project.file('src/midlet/resources/MIDLET-META-INF/MANIFEST.MF')
    def mf = new java.util.jar.Manifest()
    if (file.exists()) {
        def is = null
        try {
            is = new FileInputStream(file)
            mf.read(is)
        } finally {
            if (is != null) is.close()
        }
    }
    return mf.mainAttributes
}

static def getDate() {
    return (new Date()).format('yyMM')
}

dependencies {
    def roomVersion = '2.4.3'
    def cameraxVersion = "1.1.0-beta03"
    def autoServiceVersion = "1.0"

    implementation project(':dexlib')

    // Room
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-common:$roomVersion"
    kapt           "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion"


    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'

    // Android Jetpack
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.multidex:multidex:2.0.1'

    // Networking && APIs
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'com.google.guava:guava:31.0.1-android'
    
    // Threads, Streams and Archives
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'net.lingala.zip4j:zip4j:2.10.0'

    // Audio/Video/Graphics
    implementation 'com.github.billthefarmer:mididriver:v1.21'
    implementation 'com.github.nikita36078:pngj:2.2.3'
    implementation 'com.github.nikita36078:mobile-ffmpeg:v4.3.2-compact'

    implementation "androidx.camera:camera-core:${cameraxVersion}"
    implementation "androidx.camera:camera-camera2:${cameraxVersion}"
    implementation "androidx.camera:camera-lifecycle:${cameraxVersion}"
    implementation "androidx.camera:camera-view:${cameraxVersion}"

    // Android UI
    implementation 'com.github.nikita36078:filepicker:4.3.0'
    implementation 'com.github.yukuku:ambilwarna:2.0.1'

    // Testing && CrashReports
    implementation 'ch.acra:acra-dialog:5.9.3'

    // Other Libraries
    compileOnly "com.google.auto.service:auto-service-annotations:$autoServiceVersion"
    annotationProcessor "com.google.auto.service:auto-service:$autoServiceVersion"
}
